// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto
#ifndef GRPC_auth_2eproto__INCLUDED
#define GRPC_auth_2eproto__INCLUDED

#include "auth.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Authenticator {

class Auth final {
 public:
  static constexpr char const* service_full_name() {
    return "Authenticator.Auth";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Authenticator::Variables>> ClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Authenticator::Variables>>(ClientToServerPortStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>> AsyncClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>>(AsyncClientToServerPortStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>> PrepareAsyncClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>>(PrepareAsyncClientToServerPortStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Authenticator::Variables>> ServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Authenticator::Variables>>(ServerToClientPortStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>> AsyncServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>>(AsyncServerToClientPortStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>> PrepareAsyncServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>>(PrepareAsyncServerToClientPortStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status ClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::Authenticator::Variables* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>> AsyncClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>>(AsyncClientVerificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>> PrepareAsyncClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>>(PrepareAsyncClientVerificationRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::Authenticator::Variables* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>> AsyncServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>>(AsyncServerVerificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>> PrepareAsyncServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>>(PrepareAsyncServerVerificationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::grpc::ClientReadReactor< ::Authenticator::Variables>* reactor) = 0;
      virtual void ServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::grpc::ClientReadReactor< ::Authenticator::Variables>* reactor) = 0;
      virtual void ClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::Authenticator::Variables>* ClientToServerPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>* AsyncClientToServerPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>* PrepareAsyncClientToServerPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Authenticator::Variables>* ServerToClientPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>* AsyncServerToClientPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Authenticator::Variables>* PrepareAsyncServerToClientPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>* AsyncClientVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>* PrepareAsyncClientVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>* AsyncServerVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authenticator::Variables>* PrepareAsyncServerVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::Authenticator::Variables>> ClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Authenticator::Variables>>(ClientToServerPortStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>> AsyncClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>>(AsyncClientToServerPortStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>> PrepareAsyncClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>>(PrepareAsyncClientToServerPortStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Authenticator::Variables>> ServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Authenticator::Variables>>(ServerToClientPortStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>> AsyncServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>>(AsyncServerToClientPortStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>> PrepareAsyncServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Authenticator::Variables>>(PrepareAsyncServerToClientPortStreamRaw(context, request, cq));
    }
    ::grpc::Status ClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::Authenticator::Variables* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>> AsyncClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>>(AsyncClientVerificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>> PrepareAsyncClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>>(PrepareAsyncClientVerificationRaw(context, request, cq));
    }
    ::grpc::Status ServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::Authenticator::Variables* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>> AsyncServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>>(AsyncServerVerificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>> PrepareAsyncServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>>(PrepareAsyncServerVerificationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ClientToServerPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::grpc::ClientReadReactor< ::Authenticator::Variables>* reactor) override;
      void ServerToClientPortStream(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::grpc::ClientReadReactor< ::Authenticator::Variables>* reactor) override;
      void ClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, std::function<void(::grpc::Status)>) override;
      void ClientVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, std::function<void(::grpc::Status)>) override;
      void ServerVerification(::grpc::ClientContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::Authenticator::Variables>* ClientToServerPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request) override;
    ::grpc::ClientAsyncReader< ::Authenticator::Variables>* AsyncClientToServerPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Authenticator::Variables>* PrepareAsyncClientToServerPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Authenticator::Variables>* ServerToClientPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request) override;
    ::grpc::ClientAsyncReader< ::Authenticator::Variables>* AsyncServerToClientPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Authenticator::Variables>* PrepareAsyncServerToClientPortStreamRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>* AsyncClientVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>* PrepareAsyncClientVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>* AsyncServerVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authenticator::Variables>* PrepareAsyncServerVerificationRaw(::grpc::ClientContext* context, const ::Authenticator::Answer& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ClientToServerPortStream_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerToClientPortStream_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientVerification_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerVerification_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ClientToServerPortStream(::grpc::ServerContext* context, const ::Authenticator::Answer* request, ::grpc::ServerWriter< ::Authenticator::Variables>* writer);
    virtual ::grpc::Status ServerToClientPortStream(::grpc::ServerContext* context, const ::Authenticator::Answer* request, ::grpc::ServerWriter< ::Authenticator::Variables>* writer);
    virtual ::grpc::Status ClientVerification(::grpc::ServerContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response);
    virtual ::grpc::Status ServerVerification(::grpc::ServerContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientToServerPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientToServerPortStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ClientToServerPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientToServerPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientToServerPortStream(::grpc::ServerContext* context, ::Authenticator::Answer* request, ::grpc::ServerAsyncWriter< ::Authenticator::Variables>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerToClientPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerToClientPortStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerToClientPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerToClientPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerToClientPortStream(::grpc::ServerContext* context, ::Authenticator::Answer* request, ::grpc::ServerAsyncWriter< ::Authenticator::Variables>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientVerification() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ClientVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientVerification(::grpc::ServerContext* context, ::Authenticator::Answer* request, ::grpc::ServerAsyncResponseWriter< ::Authenticator::Variables>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerVerification() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ServerVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerVerification(::grpc::ServerContext* context, ::Authenticator::Answer* request, ::grpc::ServerAsyncResponseWriter< ::Authenticator::Variables>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ClientToServerPortStream<WithAsyncMethod_ServerToClientPortStream<WithAsyncMethod_ClientVerification<WithAsyncMethod_ServerVerification<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ClientToServerPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientToServerPortStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authenticator::Answer* request) { return this->ClientToServerPortStream(context, request); }));
    }
    ~WithCallbackMethod_ClientToServerPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientToServerPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::Authenticator::Variables>* ClientToServerPortStream(
      ::grpc::CallbackServerContext* /*context*/, const ::Authenticator::Answer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerToClientPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerToClientPortStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authenticator::Answer* request) { return this->ServerToClientPortStream(context, request); }));
    }
    ~WithCallbackMethod_ServerToClientPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerToClientPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::Authenticator::Variables>* ServerToClientPortStream(
      ::grpc::CallbackServerContext* /*context*/, const ::Authenticator::Answer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClientVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientVerification() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response) { return this->ClientVerification(context, request, response); }));}
    void SetMessageAllocatorFor_ClientVerification(
        ::grpc::MessageAllocator< ::Authenticator::Answer, ::Authenticator::Variables>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Authenticator::Answer, ::Authenticator::Variables>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClientVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientVerification(
      ::grpc::CallbackServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerVerification() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authenticator::Answer* request, ::Authenticator::Variables* response) { return this->ServerVerification(context, request, response); }));}
    void SetMessageAllocatorFor_ServerVerification(
        ::grpc::MessageAllocator< ::Authenticator::Answer, ::Authenticator::Variables>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Authenticator::Answer, ::Authenticator::Variables>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerVerification(
      ::grpc::CallbackServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ClientToServerPortStream<WithCallbackMethod_ServerToClientPortStream<WithCallbackMethod_ClientVerification<WithCallbackMethod_ServerVerification<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ClientToServerPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientToServerPortStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ClientToServerPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientToServerPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerToClientPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerToClientPortStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerToClientPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerToClientPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientVerification() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ClientVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerVerification() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ServerVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientToServerPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientToServerPortStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ClientToServerPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientToServerPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientToServerPortStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerToClientPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerToClientPortStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServerToClientPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerToClientPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerToClientPortStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientVerification() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ClientVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientVerification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerVerification() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ServerVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerVerification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientToServerPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientToServerPortStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ClientToServerPortStream(context, request); }));
    }
    ~WithRawCallbackMethod_ClientToServerPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientToServerPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ClientToServerPortStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerToClientPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerToClientPortStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ServerToClientPortStream(context, request); }));
    }
    ~WithRawCallbackMethod_ServerToClientPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerToClientPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ServerToClientPortStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientVerification() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClientVerification(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClientVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientVerification(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerVerification() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerVerification(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerVerification(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClientVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClientVerification() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Authenticator::Answer, ::Authenticator::Variables>* streamer) {
                       return this->StreamedClientVerification(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClientVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClientVerification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authenticator::Answer,::Authenticator::Variables>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerVerification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerVerification() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Authenticator::Answer, ::Authenticator::Variables>* streamer) {
                       return this->StreamedServerVerification(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerVerification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerVerification(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::Authenticator::Variables* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerVerification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authenticator::Answer,::Authenticator::Variables>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ClientVerification<WithStreamedUnaryMethod_ServerVerification<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ClientToServerPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ClientToServerPortStream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Authenticator::Answer, ::Authenticator::Variables>* streamer) {
                       return this->StreamedClientToServerPortStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ClientToServerPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientToServerPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedClientToServerPortStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Authenticator::Answer,::Authenticator::Variables>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerToClientPortStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ServerToClientPortStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Authenticator::Answer, ::Authenticator::Variables>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Authenticator::Answer, ::Authenticator::Variables>* streamer) {
                       return this->StreamedServerToClientPortStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ServerToClientPortStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerToClientPortStream(::grpc::ServerContext* /*context*/, const ::Authenticator::Answer* /*request*/, ::grpc::ServerWriter< ::Authenticator::Variables>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerToClientPortStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Authenticator::Answer,::Authenticator::Variables>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ClientToServerPortStream<WithSplitStreamingMethod_ServerToClientPortStream<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ClientToServerPortStream<WithSplitStreamingMethod_ServerToClientPortStream<WithStreamedUnaryMethod_ClientVerification<WithStreamedUnaryMethod_ServerVerification<Service > > > > StreamedService;
};

}  // namespace Authenticator


#endif  // GRPC_auth_2eproto__INCLUDED
